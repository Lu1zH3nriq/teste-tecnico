#!/usr/bin/env python3
import requests
import random
from datetime import datetime, timedelta
import getpass

# Configura√ß√µes da API
API_BASE_URL = "http://localhost:8000"

# Headers base
BASE_HEADERS = {
    "Content-Type": "application/json",
}

# Dados para gerar tarefas aleat√≥rias
TASK_TITLES = [
    "Revisar relat√≥rio mensal",
    "Reuni√£o com equipe de desenvolvimento", 
    "Atualizar documenta√ß√£o do projeto",
    "Fazer backup dos arquivos importantes",
    "Responder e-mails pendentes",
    "Preparar apresenta√ß√£o para cliente",
    "Testar nova funcionalidade",
    "Organizar arquivos do computador",
    "Estudar nova tecnologia",
    "Planejar pr√≥ximo sprint",
    "Corrigir bugs reportados",
    "Implementar autentica√ß√£o JWT",
    "Configurar ambiente de produ√ß√£o",
    "Criar testes unit√°rios",
    "Refatorar c√≥digo legado",
    "Analisar m√©tricas de performance",
    "Fazer code review",
    "Atualizar depend√™ncias do projeto",
    "Documentar API endpoints",
    "Configurar monitoramento",
    "Implementar sistema de logs",
    "Otimizar consultas ao banco",
    "Criar dashboard administrativo",
    "Integrar com servi√ßo externo",
    "Implementar cache Redis",
    "Configurar CI/CD pipeline",
    "Fazer deploy em produ√ß√£o",
    "Treinar novo membro da equipe",
    "Participar de daily standup",
    "Revisar proposta comercial",
    "Atualizar perfil profissional",
    "Organizar desktop",
    "Fazer backup do banco de dados",
    "Configurar SSL certificado",
    "Implementar websockets",
    "Criar sistema de notifica√ß√µes",
    "Otimizar frontend",
    "Configurar Docker containers",
    "Fazer an√°lise de seguran√ßa",
    "Implementar dark mode",
    "Criar sistema de busca",
    "Configurar load balancer",
    "Implementar internacionaliza√ß√£o",
    "Fazer testes de usabilidade",
    "Atualizar README do projeto",
    "Configurar ambiente de desenvolvimento",
    "Implementar sistema de coment√°rios",
    "Fazer migra√ß√£o de dados",
    "Configurar backup autom√°tico",
    "Criar API documentation"
]

DESCRIPTIONS = [
    "Tarefa importante que precisa ser conclu√≠da com aten√ß√£o aos detalhes.",
    "Atividade de rotina que faz parte do fluxo de trabalho di√°rio.",
    "Projeto estrat√©gico com impacto direto nos resultados da empresa.",
    "Manuten√ß√£o preventiva para garantir o bom funcionamento do sistema.",
    "Atividade de aprendizado para desenvolvimento profissional.",
    "Tarefa colaborativa que envolve m√∫ltiplos membros da equipe.",
    "Otimiza√ß√£o de processo para melhorar a efici√™ncia operacional.",
    "Implementa√ß√£o de nova funcionalidade solicitada pelo cliente.",
    "Corre√ß√£o de problema reportado pelos usu√°rios finais.",
    "Atualiza√ß√£o de seguran√ßa cr√≠tica para proteger os dados.",
    "Documenta√ß√£o t√©cnica para facilitar futuras manuten√ß√µes.",
    "An√°lise de dados para suporte √† tomada de decis√µes.",
    "Configura√ß√£o de ambiente para melhorar o workflow.",
    "Teste de qualidade para garantir a estabilidade do sistema.",
    "Reuni√£o de alinhamento para definir pr√≥ximos passos.",
    "",  # Algumas tarefas sem descri√ß√£o
    "",
    ""
]

PRIORITIES = ["low", "medium", "high", "urgent"]
STATUSES = ["pending", "in_progress", "completed", "cancelled"]

TAGS_LIST = [
    "Urgente, Reuni√£o",
    "Desenvolvimento, Backend",
    "Frontend, React",
    "DevOps, Infraestrutura", 
    "Documenta√ß√£o",
    "Teste, QA",
    "Seguran√ßa, SSL",
    "Performance, Otimiza√ß√£o",
    "Database, SQL",
    "API, REST",
    "Mobile, App",
    "Design, UI/UX",
    "Backup, Manuten√ß√£o",
    "Treinamento, Capacita√ß√£o",
    "Cliente, Comercial",
    "Bug, Corre√ß√£o",
    "Feature, Nova funcionalidade",
    "Refatora√ß√£o, Limpeza",
    "Monitoramento, Logs",
    "Deploy, Produ√ß√£o",
    "",  # Algumas sem tags
    "",
]

def login():
    """Faz login e retorna o token de acesso"""
    print("üîê Fazendo login...")
    
    # Credenciais padr√£o (voc√™ pode alterar se necess√°rio)
    email = input("Digite seu email: ")
    password = getpass.getpass("Digite sua senha: ")
    
    login_data = {
        "email": email,
        "password": password
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/auth/login/",
            headers=BASE_HEADERS,
            json=login_data
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            print(f"‚úÖ Login realizado com sucesso!")
            return f"Bearer {token}"
        else:
            print(f"‚ùå Erro no login: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o no login: {e}")
        return None

def generate_random_date():
    """Gera uma data aleat√≥ria entre 30 dias atr√°s e 30 dias no futuro"""
    start_date = datetime.now() - timedelta(days=30)
    end_date = datetime.now() + timedelta(days=30)
    
    random_days = random.randint(0, (end_date - start_date).days)
    random_date = start_date + timedelta(days=random_days)
    
    # Adiciona hor√°rio aleat√≥rio
    random_hour = random.randint(8, 18)  # Entre 8h e 18h
    random_minute = random.choice([0, 15, 30, 45])  # Minutos "redondos"
    
    return random_date.replace(hour=random_hour, minute=random_minute, second=0, microsecond=0)

def create_random_task():
    """Cria dados de uma tarefa aleat√≥ria"""
    title = random.choice(TASK_TITLES)
    description = random.choice(DESCRIPTIONS)
    priority = random.choice(PRIORITIES)
    status = random.choice(STATUSES)
    tags = random.choice(TAGS_LIST)
    
    # 70% das tarefas ter√£o data de vencimento
    due_date = None
    if random.random() < 0.7:
        due_date = generate_random_date().isoformat()
    
    task_data = {
        "title": title,
        "description": description,
        "priority": priority,
        "status": status,
        "tags": tags,
    }
    
    if due_date:
        task_data["due_date"] = due_date
    
    return task_data

def create_task(task_data, headers):
    """Cria uma tarefa via API"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/tasks/",
            headers=headers,
            json=task_data
        )
        
        if response.status_code == 201:
            task = response.json()
            print(f"‚úÖ Tarefa criada: {task['title']} (ID: {task['id']})")
            return task
        else:
            print(f"‚ùå Erro ao criar tarefa: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return None

def toggle_task_completion(task_id, headers):
    """Alterna o status de conclus√£o de uma tarefa"""
    try:
        response = requests.patch(
            f"{API_BASE_URL}/api/tasks/{task_id}/toggle/",
            headers=headers
        )
        
        if response.status_code == 200:
            task = response.json()
            status = "conclu√≠da" if task.get('is_completed') else "pendente"
            print(f"üîÑ Tarefa {task_id} marcada como {status}")
            return task
        else:
            print(f"‚ùå Erro ao atualizar tarefa {task_id}: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o ao atualizar tarefa {task_id}: {e}")
        return None

def main():
    """Fun√ß√£o principal que cria 50 tarefas aleat√≥rias"""
    print("üöÄ Iniciando cria√ß√£o de tarefas aleat√≥rias...")
    print("-" * 80)
    
    # Fazer login primeiro
    token = login()
    if not token:
        print("‚ùå N√£o foi poss√≠vel fazer login. Encerrando script.")
        return
    
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
    }
    
    print(f"üìä Criando 50 tarefas...")
    print("-" * 80)
    
    created_tasks = []
    
    # Criar 50 tarefas
    for i in range(50):
        print(f"üìù Criando tarefa {i+1}/50...")
        
        task_data = create_random_task()
        task = create_task(task_data, headers)
        
        if task:
            created_tasks.append(task)
            
            # 50% de chance de marcar como conclu√≠da (para tarefas com status 'completed')
            if task_data['status'] == 'completed' and random.random() < 0.8:
                toggle_task_completion(task['id'], headers)
        
        # Pequena pausa para n√£o sobrecarregar a API
        import time
        time.sleep(0.1)
    
    print("-" * 80)
    print(f"‚úÖ Processo conclu√≠do! {len(created_tasks)} tarefas criadas com sucesso.")
    
    # Estat√≠sticas
    if created_tasks:
        priorities = [task.get('priority', 'unknown') for task in created_tasks]
        statuses = [task.get('status', 'unknown') for task in created_tasks]
        
        print("\nüìä Estat√≠sticas das tarefas criadas:")
        print(f"   - Prioridades: {dict([(p, priorities.count(p)) for p in set(priorities)])}")
        print(f"   - Status: {dict([(s, statuses.count(s)) for s in set(statuses)])}")
        print(f"   - Total de tarefas: {len(created_tasks)}")

if __name__ == "__main__":
    main()
